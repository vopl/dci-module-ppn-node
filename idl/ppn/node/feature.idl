/* This file is part of the the dci project. Copyright (C) 2013-2021 vopl, shtoba.
   This program is free software: you can redistribute it and/or modify it under the terms of the GNU Affero General Public
   License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.
   This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty
   of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero General Public License for more details.
   You should have received a copy of the GNU Affero General Public License along with this program. If not, see <https://www.gnu.org/licenses/>. */

require "ppn/node/link.idl"
require "ppn/transport.idl"

scope ppn::node
{
    scope feature
    {

        interface Session
        {
            in address() -> transport::Address;
            in id() -> link::Id;
            out idSpecified(link::Id);

            out failed(exception);

            out joined(link::Remote);
            out closed();
        }

        interface CSession : Session
        {
            out connected();
        }

        interface Connectors
        {
            out connectorStarted(transport::Address);
            out connectorStopped(transport::Address);

            in connect(link::Id, transport::Address);
            out newSession(link::Id, transport::Address, CSession);
        }

        interface ASession : Session
        {
        }

        interface Acceptors
        {
            out acceptorStarted(transport::Address, transport::Address);
            out acceptorStopped(transport::Address, transport::Address);
            out acceptorFailed(transport::Address, transport::Address, exception);

            out newSession(ASession);
        }

        interface RemoteAddressSpace
        {
            in fireDiscovered(link::Id, transport::Address);
            out discovered(link::Id, transport::Address);
        }

        interface LocalAddressSpace
        {
            in getDeclared() -> set<transport::Address>;

            in declare(transport::Address);
            out declared(transport::Address);

            in undeclare(transport::Address);
            out undeclared(transport::Address);
        }

        interface AgentProvider
        {
            in getAgent(ilid) -> interface;
        }

        interface AgentRegistry : AgentProvider
        {
            in registerAgentProvider(ilid, AgentProvider);
        }

        interface Service
            : Connectors
            , Acceptors
            , RemoteAddressSpace
            , LocalAddressSpace
            , AgentRegistry
        {
            out start();
            in started() -> bool;
            out stop();
            out failed(exception);

            in join(link::Id, transport::Address) -> link::Remote;
        }
    }

    interface Feature
    {
        in setup(feature::Service);
    }
}
